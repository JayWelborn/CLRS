1.1-1:
    A) Real world example requiring sorting
        Placing books on a shelf sorted alphabetically by
        author's last name.

    B) Real world example requiring a comvex hull
        Finidng length of fence around a set of buildings
        so that all are within the fence, and the buildings
        can be used as part of the fence.

1.1-2:
    A) Measures of efficiency other than speed
        a) Return on investment (money earned per dollar spent)
        b) Getting maximum output from machines or workers
        c) Building structure up to code using the fewest
           resources

1.1-3:
    A) Data Structure strengths and weaknesses
        a) Balanced trees enable fast searching at the
           expense of taking up a lot of memory.
        b) Linked Lists are simple to implement, but are
           slow to search and not easy to sort.

1.1-4:
    A) Shortest path vs travelling salesman
        a) Both problems involve minimizing the distance
           travelled while visiting several points.
        b) The shortest path problem allows visiting of
           the same points more than once, while the
           travelling salesman doesn't.

1.1-5:
    A) Real world example requiring best possible solution
        a) Sorting names in a phone book requires the names
           to be perfectly alphabetically sorted. Any name
           out of place will stop people from searching the
           book efficiently or intuitively

    B) Real world example allowing "approximately" best solution
        a) Any real-world optimal stopping problem with a deadline
           necessarily accepts a "good enough" solution. The
           deadline means that the best solution found so far
           must be good enough.
